MKI
================

Does a binary copy from an integer variable to a `string` of the same length
as the size of the input variable

Syntax:
declare function Mki ( byval number as integer ) as string
declare function Mki<bits> ( byval number as integer<bits> ) as string

Usage:
result = Mki[$]( number )
result = Mki[$]<bits>( number )

Parameters:

`number`
A `integer` or `Integer<bits>` variable to binary copy to a `string`.

Return Value:
Returns a `string` containing a binary copy of `number`.

Description:

Does a binary copy from an `Integer` or `Integer<bits>` variable to a
`string`, setting its length to the number of bytes in the type. The resulting
string can be read back to an integer type using `Cvi` or `Cvi<bits>`.

This function is useful to write numeric values to buffers without using a
`Type` definition.

`mki` supports an optional `<bits>` parameter before the argument. If `bits`
is `16`, `Mkshort` will be called instead; if `bits` is `32`, `Mkl` will be
called; if `bits` is `64`, `Mklongint` will be called. The length of the
return value and the required `number` argument type will depend on which
function is called. See each function's page for more information.

Examples:

Dim a As Integer, b As String
a=4534
b=MKI(a)
Print a, CVI(b)


Dialect Differences:
  *In the -lang qb dialect, `Mki` returns a 2-byte-string, since a QB 
   integer is only 16 bits.
  * In the -lang qb dialect, `<bits>` parameter is not supported.
  * The string type suffix "$" is required in the -lang qb dialect.
  * The string type suffix "$" is optional in the -lang fblite dialect.
  * The string type suffix "$" is ignored in the -lang fb dialect, warn 
  only with the -w suffix compile option (or -w pedantic compile option).

